<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[陈斌彬的技术博客]]></title>
  <link href="http://cnbin.github.io/atom.xml" rel="self"/>
  <link href="http://cnbin.github.io/"/>
  <updated>2016-08-18T17:55:05+08:00</updated>
  <id>http://cnbin.github.io/</id>
  <author>
    <name><![CDATA[陈斌彬]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With ngCordova]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/18/getting-started-with-ngcordova/"/>
    <updated>2016-08-18T07:14:12+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/18/getting-started-with-ngcordova</id>
    <content type="html"><![CDATA[<!--More-->


<h3><a href="http://thejackalofjavascript.com/getting-started-with-ngcordova/">http://thejackalofjavascript.com/getting-started-with-ngcordova/</a></h3>

<h3><a href="https://www.npmjs.com/package/xenious-cordova-plugin-x-toast">https://www.npmjs.com/package/xenious-cordova-plugin-x-toast</a></h3>

<h3><a href="http://ngcordova.com/docs/plugins/device/">http://ngcordova.com/docs/plugins/device/</a></h3>

<h3><a href="http://www.ionic-china.com/ngCordova/Flashlight.html">http://www.ionic-china.com/ngCordova/Flashlight.html</a></h3>

<h3><a href="http://www.phonegapcn.com/camera">http://www.phonegapcn.com/camera</a></h3>

<h3><a href="http://cordova.apache.org/announcements/2015/12/08/cordova-ios-4.0.0.html">http://cordova.apache.org/announcements/2015/12/08/cordova-ios-4.0.0.html</a></h3>

<h3><a href="http://www.haomou.net/2015/01/05/2015_ionic_ngCordova/">http://www.haomou.net/2015/01/05/2015_ionic_ngCordova/</a></h3>

<h3><a href="https://www.npmjs.com/package/cordova-plugin-flashlight">https://www.npmjs.com/package/cordova-plugin-flashlight</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/17/cordova/"/>
    <updated>2016-08-17T19:48:05+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/17/cordova</id>
    <content type="html"><![CDATA[<!--More-->


<pre><code>npm install -g cordova
cd my_project
cordova platform update ios@4.0.0
</code></pre>

<h3>Resource Reference</h3>

<ul>
<li><a href="http://cordova.apache.org/announcements/2015/12/08/cordova-ios-4.0.0.html">http://cordova.apache.org/announcements/2015/12/08/cordova-ios-4.0.0.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 插件]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/16/xcode-cha-jian/"/>
    <updated>2016-08-16T06:58:29+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/16/xcode-cha-jian</id>
    <content type="html"><![CDATA[<!--More-->


<p>MLAutoReplace <a href="https://github.com/molon/MLAutoReplace">https://github.com/molon/MLAutoReplace</a></p>

<p>Auto-Importer-for-Xcode <a href="https://github.com/citrusbyte/Auto-Importer-for-Xcode">https://github.com/citrusbyte/Auto-Importer-for-Xcode</a></p>

<p>Cichlid <a href="https://github.com/dealforest/Cichlid">https://github.com/dealforest/Cichlid</a></p>

<p>CleanHeaders-Xcode <a href="https://github.com/insanoid/CleanHeaders-Xcode">https://github.com/insanoid/CleanHeaders-Xcode</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目适配iOS9遇到的一些问题及解决办法（更新两个小问题）]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/15/xiang-mu-gua-pei-ios9yu-dao-de-xie-wen-ti-ji-jie-jue-ban-fa-geng-xin-liang-ge-xiao-wen-ti/"/>
    <updated>2016-08-15T08:57:28+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/15/xiang-mu-gua-pei-ios9yu-dao-de-xie-wen-ti-ji-jie-jue-ban-fa-geng-xin-liang-ge-xiao-wen-ti</id>
    <content type="html"><![CDATA[<!--More-->


<h3><a href="http://www.jianshu.com/p/631bd7f12a38">http://www.jianshu.com/p/631bd7f12a38</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios与web交互]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/11/iosyu-webjiao-hu/"/>
    <updated>2016-08-11T14:48:11+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/11/iosyu-webjiao-hu</id>
    <content type="html"><![CDATA[<!--More-->


<p>web html文件加上scipt</p>

<pre><code> &lt;script&gt;
            (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
            function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
            e=o.createElement(i);r=o.getElementsByTagName(i)[0];
            e.src='https://www.google-analytics.com/analytics.js';
            r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));
            ga('create','UA-XXXXX-X','auto');ga('send','pageview');
        &lt;/script&gt;
        &lt;script&gt;

            function pushSubViewController () {
                setupWebViewJavascriptBridge(function(bridge) {
                    bridge.callHandler('push',
                        {
                            'detailID': '斌彬哥哥',
                            'actionName':'push'
                        },
                        function responseCallback(responseData) {
                            console.log("JS received response:", responseData)
                        })
                })
            }

        &lt;/script&gt;
        &lt;script&gt;
            //        init JS  //固定写法
            window.onerror = function(err) {
                log('window.onerror: ' + err)
            }

            function setupWebViewJavascriptBridge(callback) {
                if (window.WebViewJavascriptBridge) { return callback(WebViewJavascriptBridge); }
                if (window.WVJBCallbacks) { return window.WVJBCallbacks.push(callback); }
                window.WVJBCallbacks = [callback];
                var WVJBIframe = document.createElement('iframe');
                WVJBIframe.style.display = 'none';
                WVJBIframe.src = 'wvjbscheme://__BRIDGE_LOADED__';
                document.documentElement.appendChild(WVJBIframe);
                setTimeout(function() { document.documentElement.removeChild(WVJBIframe) }, 0)
            }
        &lt;/script&gt;

            &lt;p&gt;3.跳转到某些子界面&lt;/p&gt;
        &lt;button id="push" onclick="pushSubViewController()"&gt;pushSubViewController&lt;/button&gt;
</code></pre>

<p>ios端导入</p>

<p><img src="http://ww2.sinaimg.cn/mw690/78f9859egw1f6pt4darjoj207706saaz.jpg" alt="img" /></p>

<p>导入</p>

<pre><code>#import "WebViewJavascriptBridge.h"
#import "HybirdUrlHandler.h"
#import "HyBridBridge.h"
</code></pre>

<p>添加</p>

<pre><code>@property WebViewJavascriptBridge *bridge;
@property (strong, nonatomic) HyBridBridge *hybridBridge;
</code></pre>

<p>使用</p>

<pre><code>[webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"http://localhost:8080/src/"]]]];

//http://localhost:8080/src/
//http://ionic-person-6e53.coding.io/
_bridge = [WebViewJavascriptBridge bridgeForWebView:webView];
[self.hybridBridge registerHybridUrlHanlder:self andBridge:self.bridge];
</code></pre>

<p>回调</p>

<pre><code>//懒加载
- (HyBridBridge *)hybridBridge {
    if (!_hybridBridge) {
        _hybridBridge = [[HyBridBridge alloc] init];
    }
    return _hybridBridge;
}

- (NSArray *)actionNames {  //定义可支持的方法名称
    return @[@"push"];
}

//HTML 部分 需要定义 方法名称
//传参的时候 带上方法名字  我这里写的是actionName
- (BOOL)handleDictionAry:(NSDictionary *)dictionary callback:(HybridCallbackBlock)callbackBlock {
    NSString *actionTag = dictionary[@"actionName"];

    if ([actionTag isEqualToString:@"push"]) {

        NSString *detailID = dictionary[@"detailID"];
        NSLog(@"detailID is %@",detailID);
        NSLog(@"push view controller");
        BBZhiFuViewController *vc = [[BBZhiFuViewController alloc]init];
        vc.detailID = detailID;
        [self.navigationController pushViewController:vc animated:YES];
        return YES;
    }
    return NO;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic上传 Www]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/11/ionishang-chuan-www/"/>
    <updated>2016-08-11T14:39:13+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/11/ionishang-chuan-www</id>
    <content type="html"><![CDATA[<!--More-->


<p>ionic框架可以直接上传www文件夹，不使用cordova内容</p>

<pre><code>/usr/local/Cellar/tomcat/8.5.4/
</code></pre>

<p><img src="http://ww2.sinaimg.cn/mw690/78f9859egw1f6psxelzexj20cq0a2gmy.jpg" alt="img" /></p>

<p><img src="http://ww4.sinaimg.cn/mw690/78f9859egw1f6psxdtlg8j209u09yq3m.jpg" alt="img" />
执行命令</p>

<pre><code>catalina run
</code></pre>

<p><img src="http://ww1.sinaimg.cn/mw690/78f9859egw1f6pszmzwafj20tu06wwgy.jpg" alt="img" /></p>

<p><img src="http://ww4.sinaimg.cn/mw690/78f9859egw1f6pszmasofj20r00htdjb.jpg" alt="img" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何为Swift进行宏定义]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/10/ru-he-wei-swiftjin-xing-hong-ding-yi/"/>
    <updated>2016-08-10T07:50:39+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/10/ru-he-wei-swiftjin-xing-hong-ding-yi</id>
    <content type="html"><![CDATA[<!--More-->


<ul>
<li><a href="http://www.cnblogs.com/JianweiWang/p/5142306.html">http://www.cnblogs.com/JianweiWang/p/5142306.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oc 调用 Swift（原创）]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/10/oc-diao-yong-swift/"/>
    <updated>2016-08-10T07:06:09+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/10/oc-diao-yong-swift</id>
    <content type="html"><![CDATA[<!--More-->


<p>OC调用Swift的时候，Xcode会自动生成一个xxx-Swfit.h文件。只需要导入这个文件到项目里面就行了。</p>

<p>执行命令：</p>

<pre><code>~find ~/Library/Developer/Xcode/DerivedData -name "*Swift.h"
</code></pre>

<p>找到所有出现的xxx-Swift.h文件，找到项目的xxx-Swift.h文件.然后<code>#import xxx-Swfit.h</code></p>

<p><img src="http://ww1.sinaimg.cn/mw690/78f9859egw1f6oag7lxkyj21da09kk80.jpg" alt="img" /></p>

<p><img src="http://ww3.sinaimg.cn/mw690/78f9859egw1f6oag6v0zlj20hm0be42i.jpg" alt="img" /></p>

<h3>Resource Reference</h3>

<ul>
<li><a href="http://blog.csdn.net/huangchentao/article/details/35278663">http://blog.csdn.net/huangchentao/article/details/35278663</a></li>
<li><a href="http://www.th7.cn/Program/IOS/201501/377155.shtml">http://www.th7.cn/Program/IOS/201501/377155.shtml</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC与swift相互调用]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/09/ocyu-swiftxiang-hu-diao-yong/"/>
    <updated>2016-08-09T14:47:51+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/09/ocyu-swiftxiang-hu-diao-yong</id>
    <content type="html"><![CDATA[<!--More-->


<p>一、OC调用swift文件</p>

<p>二、swift调用OC文件</p>

<p>三、注意和总结</p>

<p>添加：</p>

<p>四、自定义桥接文件</p>

<p>一、OC调用swift文件</p>

<p>在OC项目中创建一个swift文件的时候，Xcode 会提示 需要创建一个桥接文件，点确定创建桥接文件，Xcode会自动创建一个桥接文件</p>

<p>名字：工程名-Bridging-Header.h</p>

<p>这个桥接文件是 swift 调用OC文件的时候用的</p>

<p>1、
进入TARGETS ->Build Settings -> Packaging 中</p>

<p>设置Defines Module为YES</p>

<p>设置 Product Module Name ，也可以不设置，默认为工程的名字。这个在后面会用到</p>

<p>2、
在swift写一个类</p>

<p>注意这个类一定要继承NSObject，不然在OC中没法用</p>

<p>class hello: NSObject {</p>

<pre><code>var address : String
var gender: String

init(address:String,gender:String){
    self.address = address
    self.gender = gender
}

func method() {
    print("message \(self.address + self.gender)")
}
}
</code></pre>

<p>3、
　　在OC需要用到的swift文件中 导入文件 &ldquo;Product Module Name -Swift.h&rdquo;  因为 Product Module Name 默认是工程的名字</p>

<p>所以直接导入 #import &ldquo;工程名-Swift.h&rdquo;</p>

<p>4、
　　记着写完先command +B编译一下，如果没有报错就可以在OC文件调用swift中的类了</p>

<p>hello *helloss = [[helloalloc]initWithAddress:@&ldquo;上海"gender:@"男&rdquo;];
[helloss method];</p>

<p>二、swift调用OC文件
　　在swift项目中创建一个OC文件的时候，Xcode 会提示创建一个桥接文件 点确定创建桥接文件，Xcode会自动创建一个桥接文件</p>

<p>名字：工程名-Bridging-Header.h</p>

<p>　　把swift需要用到的OC文件的头文件放到桥接文件里 工程名-Bridging-Header.h</p>

<p>例如：</p>

<p>1、
这个就是一个OC文件</p>

<pre><code>//#import "sec.h"
#import &lt;UIKit/UIKit.h&gt;
@interface sec : UIViewController
-(void)actionMake;
@end
</code></pre>

<p>2、
在桥接文件中把需要用到OC的头文件导入进去</p>

<pre><code>#import "sec.h"
</code></pre>

<p>3、
编译一下，就可以在swift中用swift的语法调用OC文件的方法了</p>

<pre><code>let second = sec()
second.actionMake()
</code></pre>

<p>三、注意和总结</p>

<p>注意：
1、OC项目在导入swift文件前 先按照系统提示创建桥接文件，</p>

<p>2、在 targets -> Build Settings -> Packaging  中设置Defines Module 为YES</p>

<p>3、在OC中调用swift文件的时候，swift中的类 要继承NSObject</p>

<p>不然没办法在OC中调用</p>

<p>4、OC中调用swift文件需要导入”工程名 -Swift.h"</p>

<p>（这个是build Setting -> Packaging->Product Module Name 的名字，而这个属性默认是工程的名字）</p>

<p>5、写完记得command + B 编译 一下</p>

<p>6、swift项目 引用OC文件也需要创建 桥接文件，在这个桥接文件中导入OC文件的头文件</p>

<p>7、桥接文件只有一个，作用只是为了 swift 引用OC文件，OC引用swift 文件虽然也需要创建桥接文件
        但是不需要在桥接文件中 导入swift文件</p>

<p>8、如果一个项目既有OC引用swift 也有swift引用OC ,就先设置OC调用swift文件
     在桥接文件 导入OC文件，OC可以定义PCH文件导入”工程名 -Swift.h"</p>

<p>四、自定义桥接文件</p>

<p>如果不用Xcode提示创建桥接文件也可以自定义一个桥接文件</p>

<p>1  使用 Header File  把里面的内容清空。</p>

<p>2、 这文件名可以自定义， 一般还是用 工程名-Bridging-Header.h   例如app - file.h</p>

<p>3    然后在 Build Setting -> Swift Compiler - Code Generation中</p>

<p>4、设置Objective-C Bridging Header 为自定义的桥接文件相对于工程的绝对路径，也就是项目总文件夹的路径，如果在第一层，就直接写自定义的桥接文件的名file.h，如果在下一层，文件夹/桥接文件 app/file.h</p>

<h3>Resource Reference</h3>

<ul>
<li><a href="http://www.cnblogs.com/mazhiqiang/p/5557002.html">http://www.cnblogs.com/mazhiqiang/p/5557002.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic/cordova 真机调试]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/09/ionic-slash-cordova-zhen-ji-diao-shi/"/>
    <updated>2016-08-09T11:24:36+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/09/ionic-slash-cordova-zhen-ji-diao-shi</id>
    <content type="html"><![CDATA[<!--More-->


<p>android下简单，连接手机后，直接：</p>

<pre><code>﻿​$ ionic run android
</code></pre>

<p>ios下比较麻烦点，要先装ios-deploy：</p>

<pre><code>﻿​sudo npm install -g ios-deploy
</code></pre>

<p>然后：</p>

<pre><code>﻿​ionic run ios --device
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic项目实例《Ionic中文社区》]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/09/ionicxiang-mu-shi-li-oniczhong-wen-she-qu/"/>
    <updated>2016-08-09T11:22:03+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/09/ionicxiang-mu-shi-li-oniczhong-wen-she-qu</id>
    <content type="html"><![CDATA[<!--More-->


<h3><a href="http://www.cnblogs.com/zxj159/p/4788703.html">http://www.cnblogs.com/zxj159/p/4788703.html</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat的Manager显示403 Access Denied]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/09/tomcatde-managerxian-shi-403-access-denied/"/>
    <updated>2016-08-09T10:25:16+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/09/tomcatde-managerxian-shi-403-access-denied</id>
    <content type="html"><![CDATA[<!--More-->


<p>管理tomcat的时候遇到了以下问题：</p>

<p>1.刚开始需要用户名密码，不知道用户名和密码是什么，但是输入什么都不正确。</p>

<p>解决办法：</p>

<p>自己在tomcat-users.xml中按格式添加用户 conf文件夹里面</p>

<p>默认是注释掉了的，这主要是考虑到服务器的安全，如果是本地测试，去掉以下这段注释，然后重启动服务器，再输入</p>

<pre><code>&lt;role rolename="tomcat"/&gt;
&lt;role rolename="role1"/&gt;
&lt;user username="tomcat" password="tomcat" roles="tomcat"/&gt;
&lt;user username="both" password="tomcat" roles="tomcat,role1"/&gt;
&lt;user username="role1" password="tomcat" roles="role1"/&gt;
</code></pre>

<p>　　<br/>
　　用户和密码都一目了然了。</p>

<p>2.进入manager界面之后，显示的是403 Access Denied。</p>

<p>解决办法：</p>

<p>在conf/tomcat-users.xml文件中看到这么一段话：</p>

<p>NOTE:  By default, no user is included in the &ldquo;manager-gui&rdquo; role required
to operate the &ldquo;/manager/html&rdquo; web application.  If you wish to use this app,
you must define such a user - the username and password are arbitrary.</p>

<p>也就是说，为了考虑安全，tomcat默认还是没有manager-gui的管理权限的，如果想要使用manager
的话，需要自行加入管理权限（角色）。</p>

<p>需要加一个这样的权限（角色)</p>

<pre><code>&lt;role rolename="manager-gui"/&gt;
</code></pre>

<p>然后再加到需要的用户名中去</p>

<pre><code>&lt;user username="tomcat" password="tomcat" roles="tomcat,manager-gui"/&gt;
　　这样OK了。

&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;tomcat-users&gt;
&lt;!--
NOTE:  By default, no user is included in the "manager-gui" role required
to operate the "/manager/html" web application.  If you wish to use this app,
you must define such a user - the username and password are arbitrary.
--&gt;
&lt;!--
NOTE:  The sample user and role entries below are wrapped in a comment
and thus are ignored when reading this file. Do not forget to remove
&lt;!.. ..&gt; that surrounds them.
--&gt;

&lt;!--
&lt;role rolename="tomcat"/&gt;
&lt;role rolename="role1"/&gt;
&lt;user username="tomcat" password="tomcat" roles="tomcat"/&gt;
&lt;user username="both" password="tomcat" roles="tomcat,role1"/&gt;
&lt;user username="role1" password="tomcat" roles="role1"/&gt;
--&gt;
&lt;role rolename="manager-gui"/&gt;
&lt;role rolename="admin-gui"/&gt;
&lt;user username="ming" password="064417" roles="manager-gui,admin-gui"/&gt;

&lt;/tomcat-users&gt;
</code></pre>

<h3>Resource Reference</h3>

<ul>
<li><a href="http://www.cnblogs.com/mingforyou/archive/2013/03/31/2991543.html">http://www.cnblogs.com/mingforyou/archive/2013/03/31/2991543.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brew Install Tomcat]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/09/brew-install-tomcat/"/>
    <updated>2016-08-09T10:12:29+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/09/brew-install-tomcat</id>
    <content type="html"><![CDATA[<!--More-->


<p>I recently installed Tomcat 7 and got it working with Eclipse Helios on Mac OSX Lion.</p>

<p>Install Homebrew:</p>

<p>/usr/bin/ruby -e &ldquo;$(curl -fsSL <a href="https://raw.github.com/gist/323731">https://raw.github.com/gist/323731</a>)&rdquo;</p>

<p>Install Tomcat:</p>

<p>sudo brew install tomcat</p>

<p>Test the Tomcat install by starting the server:</p>

<p>sudo catalina start</p>

<p>Set it so that you can start it without using sudo:</p>

<p>sudo chgrp -R your_user_name</p>

<p>sudo chmod -R g+rw /usr/local/Cellar/tomcat/</p>

<p>Stop the Tomcat server (if you have not already):</p>

<p>sudo catalina stop</p>

<p>Test the change to the file permissions for Tomcat by starting the server as yourself without sudo:</p>

<p>catalina start</p>

<p>Stop the Tomcat server (we want Eclipse to do the starting and stopping):
catalina stop</p>

<p>In Eclipse, open the &lsquo;Servers&rsquo; view and add a new Tomcat server. Key point is to make sure to change the name of the server so that it does not contain any spaces! If you don&rsquo;t have a &lsquo;Servers&rsquo; view, you need to go download &lsquo;Eclipse IDE for Java EE Developers&rsquo;.</p>

<p>All done! You should now be able to start and stop Tomcat from Eclipse. :)</p>

<p>首先保证brew命令能够正常使用；</p>

<p>1.搜索tomcat是否存在：</p>

<pre><code>brew search tomcat
</code></pre>

<p>2.安装tomcat：</p>

<pre><code>brew install tomcat
</code></pre>

<p>3.检查是否安装成功：</p>

<pre><code>catalina -h
</code></pre>

<p>4.运行tomcat：</p>

<pre><code>catalina run
</code></pre>

<p>Tomcat的默认端口是8080，如果运行成功可通过<code>http://localhost:8080</code>访问</p>

<p>webapp的根目录(CATALINA_HOME)为:<code>/usr/local/Cellar/tomcat/7.0.33/libexec/webapps/ROOT/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS使用Controller实现URL跳转]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/08/angularjsshi-yong-controllershi-xian-urltiao-zhuan/"/>
    <updated>2016-08-08T17:04:06+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/08/angularjsshi-yong-controllershi-xian-urltiao-zhuan</id>
    <content type="html"><![CDATA[<!--More-->


<p>1.js定义一个controller</p>

<pre><code>function MyCtrl($scope, $location) {

    $scope.jumpToUrl = function(path) {

        //TODO:add code here

    };

}
</code></pre>

<p>2.html里面应用controller</p>

<pre><code>&lt;div ng-controller=‘MyCtrl’&gt;

    &lt;button ng-click="jumpToUrl('/signin')"&gt;signin&lt;/button&gt;

&lt;/div&gt;
</code></pre>

<p>3.controller里面TODO的位置填入</p>

<pre><code>$location.path(path);
</code></pre>

<p>然后运行起来就可以看效果了。</p>

<p>假设当前页面的url是<code>http://127.0.0.1:8080/#/home</code></p>

<pre><code>$location.path(path);执行后就会跳到http://127.0.0.1:8080/#/signin
</code></pre>

<p>如果你发现页面不能正常跳转，可以在$location.path(path);后面再加上一句</p>

<pre><code>var curUrl = $location.absUrl(); //用来显示url全路径
</code></pre>

<p>调试跟踪页面时查看curUrl的值到底变成多少，大概就能猜出问题出在哪了。</p>

<h3>Resource Reference</h3>

<ul>
<li><a href="http://blog.csdn.net/rockwill/article/details/25196127">http://blog.csdn.net/rockwill/article/details/25196127</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下ionic调试]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/08/macxia-ionicdiao-shi/"/>
    <updated>2016-08-08T15:36:54+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/08/macxia-ionicdiao-shi</id>
    <content type="html"><![CDATA[<!--More-->


<h3><a href="http://my.oschina.net/twinkling/blog/504824?p=">http://my.oschina.net/twinkling/blog/504824?p=</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIWebview 的缓存策略和验证，以及 Web 相关]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/08/uiwebview-de-huan-cun-ce-lue-he-yan-zheng-,yi-ji-web-xiang-guan/"/>
    <updated>2016-08-08T08:25:11+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/08/uiwebview-de-huan-cun-ce-lue-he-yan-zheng-,yi-ji-web-xiang-guan</id>
    <content type="html"><![CDATA[<!--More-->


<p>缓存策略 NSURLRequestCachePolicy</p>

<p>NSURLRequestUseProtocolCachePolicy
缓存策略定义在 web 协议实现中，用于请求特定的URL。是默认的URL缓存策略
Specifies that the caching logic defined in the protocol implementation, if any, is used for a particular URL load request. This is the default policy for URL load requests.</p>

<p>NSURLRequestReloadIgnoringLocalCacheData
从服务端获取数据，忽略本地缓存</p>

<p>Specifies that the data for the URL load should be loaded from the originating source. No existing cache data should be used to satisfy a URL load request.</p>

<p>NSURLRequestReloadIgnoringLocalAndRemoteCacheData</p>

<p>不仅忽略本地的缓存数据，还忽略中间网络媒介（如代理服务器）忽略缓存。直接从最原始的服务器拿取
Specifies that not only should the local cache data be ignored, but that proxies and other intermediates should be instructed to disregard their caches so far as the protocol allows.</p>

<p>NSURLRequestReloadIgnoringCacheData
被NSURLRequestReloadIgnoringLocalCacheData替换了</p>

<p>Replaced by NSURLRequestReloadIgnoringLocalCacheData.</p>

<p>NSURLRequestReturnCacheDataElseLoad</p>

<p>已经存在的缓存数据用于请求返回，不管它的过期日期和已经存在了多久。如果没有请求对应的缓存数据，从数据源读取
Specifies that the existing cached data should be used to satisfy the request, regardless of its age or expiration date. If there is no existing data in the cache corresponding the request, the data is loaded from the originating source.</p>

<p>NSURLRequestReturnCacheDataDontLoad</p>

<p>已经存在的缓存数据用于请求返回，不管它的过期日期和已经存在了多久。如果没有请求对应的缓存数据，不要去数据源读取，该请求被设置为失败，这种情况多用于离线模式</p>

<p>Specifies that the existing cache data should be used to satisfy a request, regardless of its age or expiration date. If there is no existing data in the cache corresponding to a URL load request, no attempt is made to load the data from the originating source, and the load is considered to have failed. This constant specifies a behavior that is similar to an “offline” mode.</p>

<p>NSURLRequestReloadRevalidatingCacheData</p>

<p>已经存在的缓存数据先去数据源验证有效性，如果无效，将从数据源获取
Specifies that the existing cache data may be used provided the origin source confirms its validity, otherwise the URL is loaded from the origin source.</p>

<p>NSURLRequestUseProtocolCachePolicy 和 NSURLRequestReloadRevalidatingCacheData 区别</p>

<p>个人意见，仅供参考，如有错误，请指出来，这对我很重要，谢谢</p>

<p>NSURLRequestReloadRevalidatingCacheData 是一定要和原始的数据源验证 cache 是否有效。
而NSURLRequestUseProtocolCachePolicy 是根据 web 的协议来控制缓存，服务端返回数据的 head 有相关的信息。它可能会返回中间网络媒介（如代理服务器中的数据）</p>

<p>针对缓存策略做一下本地测试，这是非常有必要的</p>

<pre><code>NSURL *webUrl = [NSURL URLWithString:@"http://localhost/test.txt"];       
NSURLRequest *request =[NSURLRequest requestWithURL:webUrl cachePolicy:NSURLRequestReloadRevalidatingCacheData timeoutInterval:60];       
[self.mainWebView loadRequest:request];  
</code></pre>

<p>这里使用NSURLRequestReloadRevalidatingCacheData， 返回cache数据一定要先验证数据有效。</p>

<h3>Resource Reference</h3>

<ul>
<li><a href="http://blog.csdn.net/mangosnow/article/details/37831529">http://blog.csdn.net/mangosnow/article/details/37831529</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graceful-fs Warning When Running Grunt Task]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/08/graceful-fs-warning-when-running-grunt-task/"/>
    <updated>2016-08-08T07:06:43+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/08/graceful-fs-warning-when-running-grunt-task</id>
    <content type="html"><![CDATA[<!--More-->


<p>Warning: (node:2771) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.</p>

<p>If you&rsquo;re using homebrew here is how you can downgrade to v5.11.0</p>

<pre><code>brew tap homebrew/versions
brew unlink node
brew install homebrew/versions/node5
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FKConsole - Xcode控制台中文显示调整插件]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/04/fkconsole-xcodekong-zhi-tai-zhong-wen-xian-shi-diao-zheng-cha-jian/"/>
    <updated>2016-08-04T08:13:32+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/04/fkconsole-xcodekong-zhi-tai-zhong-wen-xian-shi-diao-zheng-cha-jian</id>
    <content type="html"><![CDATA[<!--More-->


<h3><a href="http://www.tuicool.com/articles/yUjaYv">http://www.tuicool.com/articles/yUjaYv</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac查看Http请求分析-httpie]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/04/httpie/"/>
    <updated>2016-08-04T08:05:55+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/04/httpie</id>
    <content type="html"><![CDATA[<!--More-->


<h3><a href="https://github.com/cnbin/httpie">https://github.com/cnbin/httpie</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods升级后（最新版本1.0.1），安装第三方库的时候会报如下错误]]></title>
    <link href="http://cnbin.github.io/blog/2016/07/27/cocoapodssheng-ji-hou-(zui-xin-ban-ben-1-dot-0-1),an-zhuang-di-san-fang-ku-de-shi-hou-hui-bao-ru-xia-cuo-wu/"/>
    <updated>2016-07-27T17:39:05+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/07/27/cocoapodssheng-ji-hou-(zui-xin-ban-ben-1-dot-0-1),an-zhuang-di-san-fang-ku-de-shi-hou-hui-bao-ru-xia-cuo-wu</id>
    <content type="html"><![CDATA[<!--More-->


<p>CocoaPods升级后（最新版本1.0.1），安装第三方库的时候会报如下错误：</p>

<p>　　The dependency <code>AFNetworking (~&gt; 3.1.0)</code> is not used in any concrete target.</p>

<p>原因：CocoaPods升级后，Podfile文件的内容格式要求发生了变化，必须指出指出所用第三方库的target。</p>

<p>解决步骤：</p>

<p>1）检查CocoaPods的版本</p>

<pre><code>        pod --version
</code></pre>

<p>2) 升级或安装最新版本（目前版本1.0.1）</p>

<p>注意：如果cocoapods已经是1.0.1版本，则跳过该步骤直接进入第三个步骤。</p>

<pre><code>升级命令：sudo gem update -n /usr/local/bin --system



安装命令：sudo gem install -n /usr/local/bin cocoapods
</code></pre>

<p>(3)修改Podfile的内容</p>

<p>修改前的Podfile文件的内容：</p>

<pre><code>platform:ios,'7.0'
pod 'MJRefresh', '~&gt; 3.1.0'
pod 'SDWebImage', '~&gt; 3.7.6'
pod 'SVProgressHUD', '~&gt; 2.0.3'
pod 'AFNetworking', '~&gt; 3.1.0'
</code></pre>

<p>修改后的Podfile文件的内容：</p>

<pre><code>platform:ios,'7.0'
target "MyProject" do
pod 'MJRefresh', '~&gt; 3.1.0'
pod 'SDWebImage', '~&gt; 3.7.6'
pod 'SVProgressHUD', '~&gt; 2.0.3'
pod 'AFNetworking', '~&gt; 3.1.0'
end
</code></pre>

<p>　　在Podfile文件中需要明确指出使用第三方库的target,这里target后面跟的就是自己项目本身的Target;也就是项目中的tagrets中的那个项目名称。</p>
]]></content>
  </entry>
  
</feed>
