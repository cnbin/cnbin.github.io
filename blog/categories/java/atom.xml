<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 陈斌彬的技术博客]]></title>
  <link href="http://cnbin.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://cnbin.github.io/"/>
  <updated>2016-08-18T18:05:24+08:00</updated>
  <id>http://cnbin.github.io/</id>
  <author>
    <name><![CDATA[陈斌彬]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 获取当前年份 月份 日期]]></title>
    <link href="http://cnbin.github.io/blog/2016/07/09/java-huo-qu-dang-qian-nian-fen-yue-fen-ri-qi/"/>
    <updated>2016-07-09T09:02:08+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/07/09/java-huo-qu-dang-qian-nian-fen-yue-fen-ri-qi</id>
    <content type="html"><![CDATA[<!--More-->


<pre><code>import Java.util.Calendar;

public class Main {
  public static void main(String[] args) {
    Calendar cal = Calendar.getInstance();
    int day = cal.get(Calendar.DATE);
    int month = cal.get(Calendar.MONTH) + 1;
    int year = cal.get(Calendar.YEAR);
    int dow = cal.get(Calendar.DAY_OF_WEEK);
    int dom = cal.get(Calendar.DAY_OF_MONTH);
    int doy = cal.get(Calendar.DAY_OF_YEAR);

    System.out.println("Current Date: " + cal.getTime());
    System.out.println("Day: " + day);
    System.out.println("Month: " + month);
    System.out.println("Year: " + year);
    System.out.println("Day of Week: " + dow);
    System.out.println("Day of Month: " + dom);
    System.out.println("Day of Year: " + doy);
  }
}

java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
java.util.Date currTime = new java.util.Date();

int year = currTime.getYear();//年

int month = currTime.getMonth()+1;//月

int week = currTime.getDay(); //星期几

int day = currTime.getDate();//日

String curTime = formatter.format(currTime);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中short类型变量]]></title>
    <link href="http://cnbin.github.io/blog/2016/07/06/javazhong-shortlei-xing-bian-liang/"/>
    <updated>2016-07-06T09:01:25+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/07/06/javazhong-shortlei-xing-bian-liang</id>
    <content type="html"><![CDATA[<!--More-->


<p>首先来看一下Java中的基本类型，如下表：</p>

<p><img src="http://ww3.sinaimg.cn/mw690/78f9859egw1f5jwt19ogkj20e10hf0uq.jpg" alt="img" /></p>

<p>java的基本类型存储长度都是固定的，不因机器的不同而不同，因此使java拥有了良好的移植性。</p>

<p>最近在做项目时，需要在一个变量里存放16位长的二进制数字，查看上表可知short类型正好符合需要。</p>

<p>但是因为java中的数字类型都是有符号的，因此short类型的第一位被用于表示符号，实际存储长度只有15位，</p>

<p>即－7FFF－＋7FFF。那如果要存放＋7FFF－＋FFFF的数字该怎么办呢？只有采取变通的办法，采用变换算法。我们可以利用－7FFF－－0001来存放大于7FFF的数字。转换公式为－(FFFF－X)－1。由于有了符号，所以＋0000和－0000是相等的，所以比无符号数少了1个数字，所以要在公式里减1，由于这个问题，用这个方法我们就不能存放＋8000了。</p>

<p>用这个方法可以基本满足我们的需要，如有特殊需要，如要存储＋8000，那只有采取别的办法了。</p>

<h3>Resource Reference</h3>

<ul>
<li><a href="http://blog.csdn.net/snakeqi/article/details/344069">http://blog.csdn.net/snakeqi/article/details/344069</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BigDecimal]]></title>
    <link href="http://cnbin.github.io/blog/2016/07/05/bigdecimal/"/>
    <updated>2016-07-05T11:11:17+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/07/05/bigdecimal</id>
    <content type="html"><![CDATA[<!--More-->


<p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数。在实际应用中，需要对更大或者更小的数进行运算和处理。float和double只能用来做科学计算或者是工程计算，在商业计算中要用java.math.BigDecimal。BigDecimal所创建的是对象，我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象。</p>

<pre><code>BigDecimal一共有4个构造方法
BigDecimal(int) 创建一个具有参数所指定整数值的对象。
BigDecimal(double) 创建一个具有参数所指定双精度值的对象。
BigDecimal(long) 创建一个具有参数所指定长整数值的对象。
BigDecimal(String) 创建一个具有参数所指定以字符串表示的数值的对象。
BigDecimal 的运算方式 不支持 + - * / 这类的运算 它有自己的运算方法
BigDecimal add(BigDecimal augend) 加法运算
BigDecimal subtract(BigDecimal subtrahend) 减法运算
BigDecimal multiply(BigDecimal multiplicand) 乘法运算
BigDecimal divide(BigDecimal divisor) 除法运算
</code></pre>

<p>例子：</p>

<pre><code>BigDecimal volumn = new BigDecimal("1");
volumn = volumn.add(new BigDecimal("2"));
</code></pre>

<p>输出结果：3</p>

<pre><code>int decimalPoint = new BigDecimal(entitySymbol.decimalPoint).setScale(0, RoundingMode.HALF_UP).intValue();
</code></pre>

<p>java.math.BigDecimal
是java.math包中提供的类，用来对超过16位有效位的数进行精确的运算。</p>

<pre><code>new BigDecimal(entitySymbol.decimalPoint).setScale(0, RoundingMode.HALF_UP).intValue();
</code></pre>

<p>.setScale(0, RoundingMode.HALF_UP);//第一个参数是：保留多少位小数，第二个是四舍五入。
.intValue();//是将BigDecimal转为Int类型。</p>

<p>EG：</p>

<pre><code>BigDecimal.setScale();//用于格式化小数点 
setScale(1);//表示保留以为小数，默认用四舍五入方式 
setScale(1,BigDecimal.ROUND_DOWN);//直接删除多余的小数位，如2.35会变成2.3 
setScale(1,BigDecimal.ROUND_UP);//进位处理，2.35变成2.4 
setScale(1,BigDecimal.ROUND_HALF_UP);//四舍五入，2.35变成2.4
setScaler(1,BigDecimal.ROUND_HALF_DOWN);//四舍五入，2.35变成2.3，如果是5则向下舍
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java中怎样比较String和字符串是否相等]]></title>
    <link href="http://cnbin.github.io/blog/2016/06/25/javazhong-zen-yang-bi-jiao-stringhe-zi-fu-chuan-shi-fou-xiang-deng/"/>
    <updated>2016-06-25T11:18:01+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/06/25/javazhong-zen-yang-bi-jiao-stringhe-zi-fu-chuan-shi-fou-xiang-deng</id>
    <content type="html"><![CDATA[<!--More-->


<p>在java中如果想要比较两String类型变量是否相等，可以使用equals函数，函数写法如下：</p>

<pre><code>String a;String b;
a.equals(b)返回boolean类型。
</code></pre>

<p>如果比较String和字符串是否相等，如下写法。"abc".equals(a);</p>

<p>这里字符串使用"&ldquo;括起来，不可以使用'&lsquo;。java中&rsquo;&lsquo;表示的char型，所以&rsquo;&lsquo;中只可以有一个字符。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Static]]></title>
    <link href="http://cnbin.github.io/blog/2016/06/14/java-static/"/>
    <updated>2016-06-14T18:30:31+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/06/14/java-static</id>
    <content type="html"><![CDATA[<!--More-->


<p><img src="http://ww4.sinaimg.cn/mw690/78f9859egw1f4x8srek9wj20hk0asdhb.jpg" alt="img" /></p>
]]></content>
  </entry>
  
</feed>
