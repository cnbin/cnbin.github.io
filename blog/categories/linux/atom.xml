<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 陈斌彬的技术博客]]></title>
  <link href="http://cnbin.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://cnbin.github.io/"/>
  <updated>2016-08-18T18:05:24+08:00</updated>
  <id>http://cnbin.github.io/</id>
  <author>
    <name><![CDATA[陈斌彬]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shell - Expr 用法]]></title>
    <link href="http://cnbin.github.io/blog/2015/07/08/shell-expr-yong-fa/"/>
    <updated>2015-07-08T11:48:16+08:00</updated>
    <id>http://cnbin.github.io/blog/2015/07/08/shell-expr-yong-fa</id>
    <content type="html"><![CDATA[<!--More-->


<h3>expr expression1 操作符 expression2</h3>

<p>操作符前必须加 <code>\</code> 用于转义，并且操作符和两个 expression 之间必须有空格</p>

<pre><code>count=1
count=`expr $count + 1`
echo $count
</code></pre>

<p>输出为2</p>

<p>最好用 <code>$(())</code> 代替，效率更高</p>

<pre><code>count=1
count=$(($count+1))
echo $count
</code></pre>

<p>也可以使用 <code>$[]</code></p>

<pre><code>var=$[1+5]
echo $var  //6

count=1
var=$[$count+1]
echo $var
</code></pre>

<ul>
<li>expr length String1  返回 String1 长度</li>
<li>expr index String1 String2  返回 String1 中包含 String2 中任意字符的第一个位置。</li>
<li>expr substr string1 startposition length 返回 string1 中从 startposition 开始的 lenght 个字符</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell - Test 指令]]></title>
    <link href="http://cnbin.github.io/blog/2015/07/06/shell-test-zhi-ling/"/>
    <updated>2015-07-06T11:35:33+08:00</updated>
    <id>http://cnbin.github.io/blog/2015/07/06/shell-test-zhi-ling</id>
    <content type="html"><![CDATA[<!--More-->


<p>Shell 中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p>

<h3>数值测试</h3>

<ul>
<li>参数    说明</li>
<li>-eq   等于则为真</li>
<li>-ne   不等于则为真</li>
<li>-gt   大于则为真</li>
<li>-ge   大于等于则为真</li>
<li>-lt   小于则为真</li>
<li>-le   小于等于则为真</li>
</ul>


<h4>实例演示：</h4>

<pre><code>num1=100
num2=100
if test $[num1] -eq $[num2]
then
    echo 'The two numbers are equal!'
else
    echo 'The two numbers are not equal!'
fi
</code></pre>

<p>程序截图：</p>

<p><img src="http://ww3.sinaimg.cn/mw690/78f9859egw1etpfogwrauj20cl04ugm8.jpg" alt="img" /></p>

<p>运行：</p>

<p><img src="http://ww3.sinaimg.cn/mw690/78f9859egw1etpfoggg6zj20bw00zglm.jpg" alt="img" /></p>

<h3>字符串测试</h3>

<ul>
<li>参数    说明</li>
<li>= 等于则为真</li>
<li>!=    不相等则为真</li>
<li>-z 字符串  字符串长度伪则为真</li>
<li>-n 字符串  字符串长度不伪则为真</li>
</ul>


<p>实例演示：</p>

<pre><code>num1=100
num2=100
if test num1=num2
then
    echo 'The two strings are equal!'
else
    echo 'The two strings are not equal!'
fi
</code></pre>

<p>程序截图：</p>

<p><img src="http://ww2.sinaimg.cn/mw690/78f9859egw1etpfr3pr1uj20bf04odgc.jpg" alt="img" /></p>

<p>运行：</p>

<p><img src="http://ww2.sinaimg.cn/mw690/78f9859egw1etpfr2hup7j209y00zq2z.jpg" alt="img" /></p>

<h3>文件测试</h3>

<ul>
<li>参数    说明</li>
<li>-e 文件名  如果文件存在则为真</li>
<li>-r 文件名  如果文件存在且可读则为真</li>
<li>-w 文件名  如果文件存在且可写则为真</li>
<li>-x 文件名  如果文件存在且可执行则为真</li>
<li>-s 文件名  如果文件存在且至少有一个字符则为真</li>
<li>-d 文件名  如果文件存在且为目录则为真</li>
<li>-f 文件名  如果文件存在且为普通文件则为真</li>
<li>-c 文件名  如果文件存在且为字符型特殊文件则为真</li>
<li>-b 文件名  如果文件存在且为块特殊文件则为真</li>
</ul>


<p>实例演示：</p>

<pre><code>cd /bin
if test -e ./bash
then
    echo 'The file already exists!'
else
    echo 'The file does not exists!'
fi
</code></pre>

<p>程序截图：</p>

<p><img src="http://ww2.sinaimg.cn/mw690/78f9859egw1etpfugn6p4j20bn04bwex.jpg" alt="img" /></p>

<p>运行：</p>

<p><img src="http://ww3.sinaimg.cn/mw690/78f9859egw1etpfug3ym6j209j00w3yk.jpg" alt="img" /></p>

<p>另外，Shell 还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：<code>"!"</code> 最高，<code>"-a"</code> 次之，<code>"-o"</code> 最低。例如：</p>

<pre><code>cd /bin
if test -e ./notFile -o ./bash
then
    echo 'One file exists at least!'
else
    echo 'Both dose not exists!'
fi
</code></pre>

<p>程序截图：</p>

<p><img src="http://ww2.sinaimg.cn/mw690/78f9859egw1etpfze1lfhj20bn04b0t8.jpg" alt="img" /></p>

<p>输出结果：</p>

<p><img src="http://ww1.sinaimg.cn/mw690/78f9859egw1etpfzdijnxj20a400vaa4.jpg" alt="img" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell - 函数]]></title>
    <link href="http://cnbin.github.io/blog/2015/07/06/shell-han-shu/"/>
    <updated>2015-07-06T11:09:07+08:00</updated>
    <id>http://cnbin.github.io/blog/2015/07/06/shell-han-shu</id>
    <content type="html"><![CDATA[<!--More-->


<p>linux shell 可以用户定义函数，然后在 shell 脚本中可以随便调用。</p>

<p>shell 中函数的定义格式如下：</p>

<pre><code>[ function ] funname [()]

{

    action;

    [return int;]

}
</code></pre>

<p>说明：</p>

<ol>
<li>可以带 <code>function fun()</code> 定义，也可以直接 <code>fun()</code> 定义,不带任何参数。</li>
<li>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return 后跟数值 <code>n(0-255)</code></li>
</ol>


<p>下面的例子定义了一个函数并进行调用：</p>

<pre><code>#!/bin/bash
demoFun(){
    echo "This is your first shell function!"
}
echo "Function begin..."
demoFun
echo "Function end!
</code></pre>

<p>程序截图：</p>

<p><img src="http://ww2.sinaimg.cn/mw690/78f9859egw1etpey8lyhlj20d204d3z1.jpg" alt="img" /></p>

<p>输出结果：</p>

<p><img src="http://ww3.sinaimg.cn/mw690/78f9859egw1etpey7rvoij20b901sq38.jpg" alt="img" /></p>

<p>下面定义一个带有 return 语句的函数：</p>

<pre><code>#!/bin/bash
funWithReturn(){
    echo "The function is to get the sum of two numbers..."
    echo -n "Input first number: "
    read aNum
    echo -n "Input another number: "
    read anotherNum
    echo "The two numbers are $aNum and $anotherNum !"
    return $(($aNum+$anotherNum))
}
funWithReturn
echo "The sum of two numbers is $? !"
</code></pre>

<p>程序截图：</p>

<p><img src="http://ww1.sinaimg.cn/mw690/78f9859egw1etpf447hvoj20f6066abg.jpg" alt="img" /></p>

<p>输出类似下面：</p>

<p><img src="http://ww2.sinaimg.cn/mw690/78f9859egw1etpf43rpl5j20cs02pgmb.jpg" alt="img" />  <br/>
函数返回值在调用该函数后通过 <code>$?</code> 来获得。</p>

<p>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p>

<h3>函数参数</h3>

<p>在 Shell 中，调用函数时可以向其传递参数。在函数体内部，通过<code>$n</code> 的形式来获取参数的值，例如，<code>$1</code> 表示第一个参数，<code>$2</code> 表示第二个参数&hellip;</p>

<p>带参数的函数示例：</p>

<pre><code>#!/bin/bash
funWithParam(){
    echo "The value of the first parameter is $1 !"
    echo "The value of the second parameter is $2 !"
    echo "The value of the tenth parameter is $10 !"
    echo "The value of the tenth parameter is ${10} !"
    echo "The value of the eleventh parameter is ${11} !"
    echo "The amount of the parameters is $# !"
    echo "The string of the parameters is $* !"
}
funWithParam 1 2 3 4 5 6 7 8 9 34 73
</code></pre>

<p>程序截图：</p>

<p><img src="http://ww4.sinaimg.cn/mw690/78f9859egw1etpf9w71saj20do05pwg6.jpg" alt="img" /></p>

<p>输出结果：</p>

<p><img src="http://ww2.sinaimg.cn/mw690/78f9859egw1etpf9vshgpj20dg03qgmx.jpg" alt="img" /></p>

<p>注意，<code>$10</code> 不能获取第十个参数，获取第十个参数需要 <code>${10}</code>。当 <code>n&gt;=10</code> 时，需要使用 <code>${n}</code> 来获取参数。</p>

<p>另外，还有几个特殊字符用来处理参数：</p>

<ul>
<li>参数处理  说明</li>
<li>$#    传递到脚本的参数个数</li>
<li>$*    以一个单字符串显示所有向脚本传递的参数</li>
<li>$$    脚本运行的当前进程 ID 号</li>
<li>$!    后台运行的最后一个进程的 ID 号</li>
<li>$@    与 $# 相同，但是使用时加引号，并在引号中返回每个参数。</li>
<li>$-    显示 Shell 使用的当前选项，与 set 命令功能相同。</li>
<li>$?    显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell 变量]]></title>
    <link href="http://cnbin.github.io/blog/2015/07/06/shell-bian-liang/"/>
    <updated>2015-07-06T10:51:35+08:00</updated>
    <id>http://cnbin.github.io/blog/2015/07/06/shell-bian-liang</id>
    <content type="html"><![CDATA[<!--More-->


<p>定义变量时，变量名不加美元符号（$，PHP 语言中变量需要），如：</p>

<pre><code>your_name="w3cschool.cc"
</code></pre>

<p>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</p>

<ul>
<li>首个字符必须为字母（a-z，A-Z）。</li>
<li>中间不能有空格，可以使用下划线（_）。</li>
<li>不能使用标点符号。</li>
<li>不能使用 bash 里的关键字（可用 help 命令查看保留关键字）。</li>
</ul>


<p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p>

<pre><code>for file in `ls /etc`
</code></pre>

<p>以上语句将 <code>/etc</code> 下目录的文件名循环出来。</p>

<h3>使用变量</h3>

<p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p>

<pre><code>your_name="qinjx"
echo $your_name
echo ${your_name}
</code></pre>

<p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p>

<pre><code>for skill in Ada Coffe Action Java do
    echo "I am good at ${skill}Script"
done
</code></pre>

<p>如果不给 skill 变量加花括号，写成 <code>echo "I am good at $skillScript"</code>，解释器就会把 <code>$skillScript</code> 当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p>

<p>推荐给所有变量加上花括号，这是个好的编程习惯。</p>

<p>已定义的变量，可以被重新定义，如：</p>

<pre><code>your_name="tom"
echo $your_name
your_name="alibaba"
echo $your_name
</code></pre>

<p>这样写是合法的，但注意，第二次赋值的时候不能写$your_name=&ldquo;alibaba"，使用变量的时候才加美元符（$）。</p>

<h2>Shell 字符串</h2>

<p>字符串是 shell 编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟 PHP 类似。</p>

<h3>单引号</h3>

<pre><code>str='this is a string'
</code></pre>

<p>单引号字符串的限制：</p>

<ul>
<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li>
<li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）。</li>
</ul>


<h3>双引号</h3>

<pre><code>your_name='qinjx'
str="Hello, I know your are \"$your_name\"! \n"
</code></pre>

<p>双引号的优点：</p>

<ul>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>


<h3>拼接字符串</h3>

<pre><code>your_name="qinjx"
greeting="hello, "$your_name" !"
greeting_1="hello, ${your_name} !"
echo $greeting $greeting_1
</code></pre>

<h3>获取字符串长度</h3>

<pre><code>string="abcd"
echo ${#string} #输出 4
</code></pre>

<h3>提取子字符串</h3>

<pre><code>string="alibaba is a great company"
echo ${string:1:4} #输出liba
</code></pre>

<h3>查找子字符串</h3>

<pre><code>string="alibaba is a great company"
echo `expr index "$string" is`
</code></pre>

<p>注意： 以上脚本中 ` 是反引号，而不是单引号 &lsquo;，不要看错了。</p>

<h2>Shell 数组</h2>

<p>bash 支持一维数组（不支持多维数组），并且没有限定数组的大小。</p>

<p>类似与 C 语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p>

<h3>定义数组</h3>

<p>在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：</p>

<pre><code>数组名=(值1 值2 ... 值n)
</code></pre>

<p>例如：</p>

<pre><code>array_name=(value0 value1 value2 value3)
</code></pre>

<p>或者</p>

<pre><code>array_name=(
value0
value1
value2
value3
)
</code></pre>

<p>还可以单独定义数组的各个分量：</p>

<pre><code>array_name[0]=value0
array_name[1]=value1
array_name[n]=valuen
</code></pre>

<p>可以不使用连续的下标，而且下标的范围没有限制。</p>

<h3>读取数组</h3>

<h5>读取数组元素值的一般格式是：</h5>

<pre><code>${数组名[下标]}
</code></pre>

<p>例如：</p>

<pre><code>valuen=${array_name[n]}
</code></pre>

<p>使用 @ 符号可以获取数组中的所有元素，例如：</p>

<pre><code>echo ${array_name[@]}
</code></pre>

<h4>获取数组的长度</h4>

<p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p>

<pre><code># 取得数组元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
# 取得数组单个元素的长度
lengthn=${#array_name[n]}
</code></pre>

<h2>Shell 注释</h2>

<p>以 <code>#</code> 开头的行就是注释，会被解释器忽略。</p>

<p>sh 里没有多行注释，只能每一行加一个 <code>#</code> 号。只能像这样：</p>

<pre><code>#--------------------------------------------
# 这是一个自动打ipa的脚本，基于webfrogs的ipa-build书写：
# https://github.com/webfrogs/xcode_shell/blob/master/ipa-build
# 功能：自动为etao ios app打包，产出物为14个渠道的ipa包
# 特色：全自动打包，不需要输入任何参数
#--------------------------------------------
##### 用户配置区 开始 #####
#
#
# 项目根目录，推荐将此脚本放在项目的根目录，这里就不用改了
# 应用名，确保和Xcode里Product下的target_name.app名字一致
#
##### 用户配置区 结束  #####
</code></pre>

<p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？</p>

<p>每一行加个 <code>#</code> 符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell - Echo 指令]]></title>
    <link href="http://cnbin.github.io/blog/2015/07/06/shell-echo-zhi-ling/"/>
    <updated>2015-07-06T10:22:56+08:00</updated>
    <id>http://cnbin.github.io/blog/2015/07/06/shell-echo-zhi-ling</id>
    <content type="html"><![CDATA[<!--More-->


<p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：</p>

<pre><code>echo string
</code></pre>

<p>您可以使用 echo 实现更复杂的输出格式控制。</p>

<h3>1.显示普通字符串:</h3>

<pre><code>echo "It is a test"
</code></pre>

<p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p>

<pre><code>echo It is a test
</code></pre>

<h3>2.显示转义字符</h3>

<pre><code>echo "\"It is a test\""
</code></pre>

<p>结果将是:</p>

<pre><code>"It is a test"
</code></pre>

<p>同样，双引号也可以省略</p>

<h3>3.显示变量</h3>

<p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p>

<pre><code> #!/bin/sh
 read name 
 echo "$name It is a test"
</code></pre>

<p>以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:</p>

<pre><code># sh test.sh
OK                     #标准输入
OK It is a test        #输出
</code></pre>

<h3>4.显示换行</h3>

<pre><code> echo -e "OK!\n" # -e 开启转义
 echo "It it a test"
</code></pre>

<p>输出结果：</p>

<pre><code>OK!

It it a test
</code></pre>

<h3>5.显示不换行</h3>

<pre><code>#!/bin/sh
echo -e "OK! \c" # -e 开启转义 \c 不换行
echo "It is a test"
</code></pre>

<p>输出结果：</p>

<pre><code>OK! It is a test
</code></pre>

<h3>6.显示结果定向至文件</h3>

<pre><code>echo "It is a test" &gt; myfile
</code></pre>

<h3>7.原样输出字符串，不进行转义或取变量(用单引号)</h3>

<pre><code>echo '$name\"'
</code></pre>

<p>输出结果：</p>

<pre><code>$name\"
</code></pre>

<h3>8.显示命令执行结果</h3>

<pre><code>echo `date`
</code></pre>

<p>结果将显示当前日期</p>

<pre><code>Fri Jul 3 11:55:06 CST 2015
</code></pre>
]]></content>
  </entry>
  
</feed>
