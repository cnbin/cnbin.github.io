<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 陈斌彬的技术博客]]></title>
  <link href="http://cnbin.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://cnbin.github.io/"/>
  <updated>2017-04-11T17:13:30+08:00</updated>
  <id>http://cnbin.github.io/</id>
  <author>
    <name><![CDATA[陈斌彬]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tools:context]]></title>
    <link href="http://cnbin.github.io/blog/2016/07/09/tools-context/"/>
    <updated>2016-07-09T14:04:51+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/07/09/tools-context</id>
    <content type="html"><![CDATA[<!--More-->


<pre><code>&lt;TextView  
        android:layout_width="wrap_content"  
        android:layout_height="wrap_content"  
        android:layout_centerHorizontal="true"  
        android:layout_centerVertical="true"  
        android:text="@string/hello_world"  
        tools:context=".MainActivity" /&gt;  
</code></pre>

<p>一直对于 tools:context=&ldquo;.MainActivity"这句不懂，今天查了下，发现是这样的：</p>

<p>tools:context=&ldquo;activity name"这一句不会被打包进APK。只是ADT的Layout Editor在你当前的Layout文件里面设置对应的渲染上下文，说明你当前的Layout所在的渲染上下文是activity name对应的那个activity，如果这个activity在manifest文件中设置了Theme，那么ADT的Layout Editor会根据这个Theme来渲染你当前的Layout。就是说如果你设置的MainActivity设置了一个Theme.Light（其他的也可以），那么你在可视化布局管理器里面看到的背景阿控件阿什么的就应该是Theme.Light的样子。仅用于给你看所见即所得的效果而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对android中ActionBar中setDisplayHomeAsUpEnabled和setHomeButtonEnabled和setDisplayShowHomeEnabled方法的理解]]></title>
    <link href="http://cnbin.github.io/blog/2016/07/08/dui-androidzhong-actionbarzhong-setdisplayhomeasupenabledhe-sethomebuttonenabledhe-setdisplayshowhomeenabledfang-fa-de-li-jie/"/>
    <updated>2016-07-08T15:29:07+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/07/08/dui-androidzhong-actionbarzhong-setdisplayhomeasupenabledhe-sethomebuttonenabledhe-setdisplayshowhomeenabledfang-fa-de-li-jie</id>
    <content type="html"><![CDATA[<!--More-->


<p>setHomeButtonEnabled这个小于4.0版本的默认值为true的。但是在4.0及其以上是false，该方法的作用：决定左上角的图标是否可以点击。没有向左的小图标。 true 图标可以点击  false 不可以点击。</p>

<p>actionBar.setDisplayHomeAsUpEnabled(true)    // 给左上角图标的左边加上一个返回的图标 。对应ActionBar.DISPLAY_HOME_AS_UP</p>

<p>actionBar.setDisplayShowHomeEnabled(true)   //使左上角图标是否显示，如果设成false，则没有程序图标，仅仅就个标题，否则，显示应用程序图标，对应id为Android.R.id.home，对应ActionBar.DISPLAY_SHOW_HOME</p>

<p>actionBar.setDisplayShowCustomEnabled(true)  // 使自定义的普通View能在title栏显示，即actionBar.setCustomView能起作用，对应ActionBar.DISPLAY_SHOW_CUSTOM</p>

<p>actionBar.setDisplayShowTitleEnabled(true)   //对应ActionBar.DISPLAY_SHOW_TITLE。</p>

<p>其中setHomeButtonEnabled和setDisplayShowHomeEnabled共同起作用，如果setHomeButtonEnabled设成false，即使setDisplayShowHomeEnabled设成true，图标也不能点击</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 如何解析Xml字符串]]></title>
    <link href="http://cnbin.github.io/blog/2016/07/06/android-ru-he-jie-xi-xmlzi-fu-chuan/"/>
    <updated>2016-07-06T08:51:16+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/07/06/android-ru-he-jie-xi-xmlzi-fu-chuan</id>
    <content type="html"><![CDATA[<!--More-->


<p>在Android平台上可以使用Simple API for XML(SAX) 、 Document Object Model(DOM)和Android附带的pull解析器解析XML文件。</p>

<p>下面是本例子要解析的XML文件：itcast.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;persons&gt;
　　&lt;person id="23"&gt;
　　　　&lt;name&gt;李明&lt;/name&gt;
　　　　&lt;age&gt;30&lt;/age&gt;
　　&lt;/person&gt;
　　&lt;person id="20"&gt;
　　　　&lt;name&gt;李向梅&lt;/name&gt;
　　　　&lt;age&gt;25&lt;/age&gt;
　　&lt;/person&gt;
&lt;/persons&gt;
</code></pre>

<p>例子定义了一个javabean用于存放上面解析出来的xml内容， 这个javabean为Person，代码：</p>

<pre><code>public class Person {

    private Integer id;
    private String name;
    private Short age;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
}

    public Short getAge() {
        return age;
    }

    public void setAge(Short age) {
        this.age = age;
    }
}
</code></pre>

<p>Pull解析器解析XML文件</p>

<p>Pull解析器的运行方式与 SAX 解析器相似。它提供了类似的事件，如：开始元素和结束元素事件，使用<code>parser.next()</code>可以进入下一个元素并触发相应事件。事件将作为数值代码被发送，因此可以使用一个switch对感兴趣的事件进行处理。当元素开始解析时，调用parser.nextText()方法可以获取下一个Text类型元素的值。</p>

<pre><code>//读取XML
public static List&lt;Person&gt; readXML(InputStream inStream) {

            XmlPullParser parser = Xml.newPullParser();

            try {
                        parser.setInput(inStream, "UTF-8");
                        int eventType = parser.getEventType();

                        Person currentPerson = null;
                        List&lt;Person&gt; persons = null;

                        while (eventType != XmlPullParser.END_DOCUMENT) {
                                    switch (eventType) {
                                    case XmlPullParser.START_DOCUMENT://文档开始事件,可以进行数据初始化处理
                                                persons = new ArrayList&lt;Person&gt;();
                                                break;

                                     case XmlPullParser.START_TAG://开始元素事件
                                                String name = parser.getName();
                                                if (name.equalsIgnoreCase("person")) {
                                                            currentPerson = new Person();
                                                            currentPerson.setId(new Integer(parser.getAttributeValue(null, "id")));
                                                } else if (currentPerson != null) {
                                                            if (name.equalsIgnoreCase("name")) {
                                                                        currentPerson.setName(parser.nextText());// 如果后面是Text元素,即返回它的值
                                                            } else if (name.equalsIgnoreCase("age")) {
                                                                        currentPerson.setAge(new Short(parser.nextText()));
                                                            }
                                                }
                                                break;

                                    case XmlPullParser.END_TAG://结束元素事件
                                                if (parser.getName().equalsIgnoreCase("person") &amp;&amp; currentPerson != null) {
                                                            persons.add(currentPerson);
                                                            currentPerson = null;
                                                }

                                                break;
                                    }

                                     eventType = parser.next();
                        }

            inStream.close();
            return persons;
            } catch (Exception e) {
                        e.printStackTrace();
            }

            return null;
}
</code></pre>

<h3>Resource Reference</h3>

<ul>
<li><a href="http://www.cnblogs.com/devinzhang/archive/2012/01/16/2323668.html">http://www.cnblogs.com/devinzhang/archive/2012/01/16/2323668.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中Parcelable接口用法]]></title>
    <link href="http://cnbin.github.io/blog/2016/07/05/androidzhong-parcelablejie-kou-yong-fa/"/>
    <updated>2016-07-05T11:12:43+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/07/05/androidzhong-parcelablejie-kou-yong-fa</id>
    <content type="html"><![CDATA[<!--More-->


<ol>
<li>Parcelable接口</li>
</ol>


<p>Interface for classes whose instances can be written to and restored from a Parcel。 Classes implementing the Parcelable interface must also have a static field called CREATOR， which is an object implementing the Parcelable.Creator interface。</p>

<p>2.实现Parcelable就是为了进行序列化，那么，为什么要序列化？</p>

<p>1）永久性保存对象，保存对象的字节序列到本地文件中；</p>

<p>2）通过序列化对象在网络中传递对象；</p>

<p>3）通过序列化在进程间传递对象。</p>

<p>3.实现序列化的方法</p>

<p>Android中实现序列化有两个选择：一是实现Serializable接口（是JavaSE本身就支持的），一是实现Parcelable接口（是Android特有功能，效率比实现Serializable接口高效，可用于Intent数据传递，也可以用于进程间通信（IPC））。实现Serializable接口非常简单，声明一下就可以了，而实现Parcelable接口稍微复杂一些，但效率更高，推荐用这种方法提高性能。</p>

<p>注：Android中Intent传递对象有两种方法：一是Bundle.putSerializable(Key，Object)，另一种是Bundle.putParcelable(Key，Object)。当然这些Object是有一定的条件的，前者是实现了Serializable接口，而后者是实现了Parcelable接口。</p>

<p>4.选择序列化方法的原则</p>

<p>1）在使用内存的时候，Parcelable比Serializable性能高，所以推荐使用Parcelable。</p>

<p>2）Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。</p>

<p>3）Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点，但此时还是建议使用Serializable 。</p>

<p>5.应用场景</p>

<p>需要在多个部件(Activity或Service)之间通过Intent传递一些数据，简单类型（如：数字、字符串）的可以直接放入Intent。复杂类型必须实现Parcelable接口。</p>

<p>6、Parcelable接口定义</p>

<pre><code>public interface Parcelable 
{
    //内容描述接口，基本不用管
    public int describeContents();
    //写入接口函数，打包
    public void writeToParcel(Parcel dest, int flags);
    //读取接口，目的是要从Parcel中构造一个实现了Parcelable的类的实例处理。因为实现类在这里还是不可知的，所以需要用到模板的方式，继承类名通过模板参数传入
    //为了能够实现模板参数的传入，这里定义Creator嵌入接口,内含两个接口函数分别返回单个和多个继承类实例
    public interface Creator&lt;T&gt; 
    {
           public T createFromParcel(Parcel source);
           public T[] newArray(int size);
    }
}
</code></pre>

<p>7、实现Parcelable步骤</p>

<p>1）implements Parcelable</p>

<p>2）重写writeToParcel方法，将你的对象序列化为一个Parcel对象，即：将类的数据写入外部提供的Parcel中，打包需要传递的数据到Parcel容器保存，以便从 Parcel容器获取数据</p>

<p>3）重写describeContents方法，内容接口描述，默认返回0就可以</p>

<p>4）实例化静态内部对象CREATOR实现接口Parcelable.Creator</p>

<p>public static final Parcelable.Creator<T> CREATOR
注：其中public static final一个都不能少，内部对象CREATOR的名称也不能改变，必须全部大写。需重写本接口中的两个方法：createFromParcel(Parcel in) 实现从Parcel容器中读取传递数据值，封装成Parcelable对象返回逻辑层，newArray(int size) 创建一个类型为T，长度为size的数组，仅一句话即可（return new T[size]），供外部类反序列化本类数组使用。</p>

<p>简而言之：通过writeToParcel将你的对象映射成Parcel对象，再通过createFromParcel将Parcel对象映射成你的对象。也可以将Parcel看成是一个流，通过writeToParcel把对象写到流里面，在通过createFromParcel从流里读取对象，只不过这个过程需要你来实现，因此写的顺序和读的顺序必须一致。</p>

<p>代码如下：</p>

<pre><code>public class MyParcelable implements Parcelable 
{
     private int mData;

     public int describeContents() 
     {
         return 0;
     }

     public void writeToParcel(Parcel out, int flags) 
     {
         out.writeInt(mData);
     }

     public static final Parcelable.Creator&lt;MyParcelable&gt; CREATOR = new Parcelable.Creator&lt;MyParcelable&gt;() 
     {
         public MyParcelable createFromParcel(Parcel in) 
         {
             return new MyParcelable(in);
         }

         public MyParcelable[] newArray(int size) 
         {
             return new MyParcelable[size];
         }
     };

     private MyParcelable(Parcel in) 
     {
         mData = in.readInt();
     }
 }
</code></pre>

<p>8、Serializable实现与Parcelabel实现的区别</p>

<p>1）Serializable的实现，只需要implements  Serializable 即可。这只是给对象打了一个标记，系统会自动将其序列化。</p>

<p>2）Parcelabel的实现，不仅需要implements  Parcelabel，还需要在类中添加一个静态成员变量CREATOR，这个变量需要实现 Parcelable.Creator 接口。</p>

<p>两者代码比较：</p>

<p>1）创建Person类，实现Serializable</p>

<pre><code>public class Person implements Serializable
{
    private static final long serialVersionUID = -7060210544600464481L;
    private String name;
    private int age;

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public int getAge()
    {
        return age;
    }

    public void setAge(int age)
    {
        this.age = age;
    }
}
</code></pre>

<p>2）创建Book类，实现Parcelable</p>

<pre><code>public class Book implements Parcelable
{
    private String bookName;
    private String author;
    private int publishDate;

    public Book()
    {

    }

    public String getBookName()
    {
        return bookName;
    }

    public void setBookName(String bookName)
    {
        this.bookName = bookName;
    }

    public String getAuthor()
    {
        return author;
    }

    public void setAuthor(String author)
    {
        this.author = author;
    }

    public int getPublishDate()
    {
        return publishDate;
    }

    public void setPublishDate(int publishDate)
    {
        this.publishDate = publishDate;
    }

    @Override
    public int describeContents()
    {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel out, int flags)
    {
        out.writeString(bookName);
        out.writeString(author);
        out.writeInt(publishDate);
    }

    public static final Parcelable.Creator&lt;Book&gt; CREATOR = new Creator&lt;Book&gt;()
    {
        @Override
        public Book[] newArray(int size)
        {
            return new Book[size];
        }

        @Override
        public Book createFromParcel(Parcel in)
        {
            return new Book(in);
        }
    };

    public Book(Parcel in)
    {
        bookName = in.readString();
        author = in.readString();
        publishDate = in.readInt();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@SuppressLint]]></title>
    <link href="http://cnbin.github.io/blog/2016/07/05/at-suppresslint/"/>
    <updated>2016-07-05T11:11:55+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/07/05/at-suppresslint</id>
    <content type="html"><![CDATA[<!--More-->


<p>java android 开发，这个注解是什么意思？ @SuppressLint(&ldquo;InlinedApi&rdquo;)</p>

<pre><code>@SuppressLint标注忽略指定的警告。
</code></pre>
]]></content>
  </entry>
  
</feed>
