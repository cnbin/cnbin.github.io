<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Js | 陈斌彬的技术博客]]></title>
  <link href="http://cnbin.github.io/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://cnbin.github.io/"/>
  <updated>2017-04-11T17:13:30+08:00</updated>
  <id>http://cnbin.github.io/</id>
  <author>
    <name><![CDATA[陈斌彬]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Js中的闭包]]></title>
    <link href="http://cnbin.github.io/blog/2017/04/11/jszhong-de-bi-bao/"/>
    <updated>2017-04-11T17:11:32+08:00</updated>
    <id>http://cnbin.github.io/blog/2017/04/11/jszhong-de-bi-bao</id>
    <content type="html"><![CDATA[<!--More-->


<h3>闭包的概念</h3>

<p>Wikipedia：In programming languages, closures (also lexical closures or function closures) are a technique for implementing lexically scoped name binding in languages with first-class functions.</p>

<p>译文：”在编程语言中，闭包（也词法闭包或函数闭包）是结合拥有 First-class function 的语言，实现词法作用域名的一种技术。”</p>

<h3>扩展: 什么是 first-class ?</h3>

<p>First-class 指的是可以作为参数传递，可以使用return里返回，可以赋给变量的类型
Second-class 该等级类型的值可以作为参数传递，但是不能从子程序里返回，也不能赋给变量
Third-class 该等级类型的值连作为参数传递也不行</p>

<p>百度百科： 闭包 指可以包含自由（未绑定到特定对象）变量的代码块；这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（局部变量）。</p>

<p>从概念上来看，维基百科的解释更加偏向于理论层面的抽象概念，而百度百科的定义则偏重实际编码中的实体。</p>

<h3>那么闭包（closure）究竟是什么？</h3>

<p>JavaScript中的闭包</p>

<p>以 JavaScript 语言为例，谈一谈闭包。</p>

<p>首先，在 JavaScript 中几乎所有类型都可为 first-class 类型 (包括function)， 所以，JavaScript 中闭包是确定可构造出来的。</p>

<p>由于闭包 (closure)本身与作用域(scope)息息相关，所以有必要先谈谈 JS 的作用域。</p>

<h4>无块级作用域</h4>

<p>与众多语言不同的是: JavaScript 默认并无块级作用域，也就是说在花括号{}不能形成一个独立的作用域（例如 Java、C++ 中的作用域）。JavaScript是函数级作用域, 也就是每次创建一个 function 才会形成一个新的 “块级“ 作用域。</p>

<p>例如：</p>

<pre><code>var scope ="global";  
if(true){  
    var scope ="local";  
    console.log(scope)  //输出local
}  
console.log(scope); //输出local
</code></pre>

<p>假设 JavaScript 有块级作用域，明显if语句中将创建一个局部的变量scope, 在这个块中会覆盖全局定义的scope值, 所以会首先输出 “local”。但这时候块中的局部变量并不会修改在这个块外定义的变量 scope, 第二个console应该输出 “global”。</p>

<p>可是实际上没有这样, 两个console都会输出 “local” ，效果和去掉了{}相同。</p>

<p>所以 JS 没有块级作用域。</p>

<h3>函数作用域</h3>

<p>所谓函数作用域就是说：创建一个新的函数时，在函数体内部会生成新的局部作用域，其中的变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。</p>

<p>比如：</p>

<pre><code>var scope="global";  
function t(){  
    var scope="local" ; 
    console.log(scope);  //local
}  
t(); 
console.log(scope);  //global
</code></pre>

<p>全局定义变量scope， 函数内部又定义一次scope, 那么在函数内部的作用域中，旧的定义会被覆盖。 外部的仍然输出 “global”。</p>

<p>来一个稍微复杂的函数作用域的例子吧：</p>

<pre><code>var g = 0; //全局作用域
function f1() {
    // 这里面就形成了一个函数作用域, 能够保护其中的变量不能被外部访问
    var a = 1;
    console.log(g); // 函数作用域内能够访问全局作用域的变量

    // 嵌套函数作用域
    function f2() {
        // 这里面再度形成了一个函数作用域，其中可以访问外部的f1函数作用域
        var b = 2;
        console.log(a);
    }
    console.log(b); // 出了 f2 的作用域就不能访问其中的东西了，报错 undefined
}
f1();
console.log(a); // 报错 ReferenceError: a is not defined
</code></pre>

<h3>闭包</h3>

<p>回顾一下前文中的概念：闭包 是指可以包含自由（未绑定到特定对象）变量的代码块；这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（局部变量）。</p>

<p>上面的例子中，函数f2就是一个闭包，原因是：</p>

<p>f2中包含自由变量a;
a不是在f2的代码块内定义；</p>

<p>a不是在任何全局上下文中定义；</p>

<p>a是在函数f1的内部定义(局部变量)，函数f1的内部即就是定义f2这个代码块的环境</p>

<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“能够读取其他函数内部变量的子函数”。</p>

<p>当函数f1的内部函数f2被函数f1外的一个变量引用的时候，就创建了一个闭包。</p>

<h3>经典示例：</h3>

<p>以最经典的for循环为例. 大家可以试试下面这段代码，取自JavaScript 秘密花园循环中的闭包</p>

<pre><code>for(var i = 0; i &lt; 10; i++) {
    setTimeout(function() {
        console.log(i);
    }, 1000);
}
</code></pre>

<p>首先说说为什么最终输出的是 10 次 10, 而不是你想象中的 0, 1, 2, 3, 4, 5, 6, 7, 8, 9</p>

<p>因为setTimeout是异步的!</p>

<p>你可以想象由于setTimeout是异步的，因此我们将这个for循环拆成 2 个部分，第一个部分专门处理 i 值的变化，第二个部分专门来做setTimeout。因此我们可以得到如下代码：</p>

<pre><code>// 第一个部分
i++;
... 
i++; // 总共做10次

// 第二个部分
setTimeout(function() {
 console.log(i);
}, 1000); 
... // 总共做10次
</code></pre>

<p>由于循环中的变量 i一直在变, 最终会变成 10, 而循环每每执行setTimeout时, 其中的方法还只是装入延时执行的队列，没有真正运行, 等真正到时间执行时, i 的值已经变成 10 了。i 变化的整个过程是瞬间完成的, 总之同步比异步要快, 就算setTimout是 0 毫秒也一样, 会先于你执行完成。</p>

<h3>如何解决？闭包！</h3>

<p>如果我们定义一个外部函数, 让 i 作为参数传入即可 “闭包” 我们要的变量了。</p>

<pre><code>for (var i = 0; i &lt; 10; i++) {
  (function(a) {
      // 变量 i 的值在传递到这个作用域时被复制给了 a,
      // 因此这个值就不会随外部变量而变化了
      setTimeout(function() {
          console.log(a);
      }, 1000);
  })(i); // 我们在这里传入参数来"闭包"变量
}
</code></pre>

<p>那么为什么setTimeout中匿名function没有形成闭包呢?</p>

<p>因为setTimeout中的匿名function没有将 i 作为参数传入来固定这个变量的值，让其保留下来，而是直接引用了外部作用域中的 i，因此 i 变化时，也影响到了匿名function。</p>

<p>一个经典的闭包面试题：</p>

<pre><code>function fun(n,o) {
  console.log(o)
  return {
    fun:function(m){
      return fun(m,n);
    }
  };
}
var a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);//undefined,?,?,?
var b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,?
var c = fun(0).fun(1);  c.fun(2);  c.fun(3);//undefined,?,?,?
</code></pre>

<p>闭包的风险:</p>

<ul>
<li><p>由于闭包会使得函数中的变量会被更长时间保存在内存中，消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中更是可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p></li>
<li><p>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS使用Controller实现URL跳转]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/08/angularjsshi-yong-controllershi-xian-urltiao-zhuan/"/>
    <updated>2016-08-08T17:04:06+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/08/angularjsshi-yong-controllershi-xian-urltiao-zhuan</id>
    <content type="html"><![CDATA[<!--More-->


<p>1.js定义一个controller</p>

<pre><code>function MyCtrl($scope, $location) {

    $scope.jumpToUrl = function(path) {

        //TODO:add code here

    };

}
</code></pre>

<p>2.html里面应用controller</p>

<pre><code>&lt;div ng-controller=‘MyCtrl’&gt;

    &lt;button ng-click="jumpToUrl('/signin')"&gt;signin&lt;/button&gt;

&lt;/div&gt;
</code></pre>

<p>3.controller里面TODO的位置填入</p>

<pre><code>$location.path(path);
</code></pre>

<p>然后运行起来就可以看效果了。</p>

<p>假设当前页面的url是<code>http://127.0.0.1:8080/#/home</code></p>

<pre><code>$location.path(path);执行后就会跳到http://127.0.0.1:8080/#/signin
</code></pre>

<p>如果你发现页面不能正常跳转，可以在$location.path(path);后面再加上一句</p>

<pre><code>var curUrl = $location.absUrl(); //用来显示url全路径
</code></pre>

<p>调试跟踪页面时查看curUrl的值到底变成多少，大概就能猜出问题出在哪了。</p>

<h3>Resource Reference</h3>

<ul>
<li><a href="http://blog.csdn.net/rockwill/article/details/25196127">http://blog.csdn.net/rockwill/article/details/25196127</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graceful-fs Warning When Running Grunt Task]]></title>
    <link href="http://cnbin.github.io/blog/2016/08/08/graceful-fs-warning-when-running-grunt-task/"/>
    <updated>2016-08-08T07:06:43+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/08/08/graceful-fs-warning-when-running-grunt-task</id>
    <content type="html"><![CDATA[<!--More-->


<p>Warning: (node:2771) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.</p>

<p>If you&rsquo;re using homebrew here is how you can downgrade to v5.11.0</p>

<pre><code>brew tap homebrew/versions
brew unlink node
brew install homebrew/versions/node5
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TreeView,TreeNode,TreeNodeCollection]]></title>
    <link href="http://cnbin.github.io/blog/2016/02/23/treeview/"/>
    <updated>2016-02-23T10:27:38+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/02/23/treeview</id>
    <content type="html"><![CDATA[<!--More-->


<ol>
<li>TreeView</li>
</ol>


<p>TreeView 控件由节点组成。树中的每一项称为一个节点并由 TreeNode 对象表示。包含其他节点的节点称为“父节点”。包含在其他节点中的节点称为“子节点”。没有任何子节点的节点称为“叶节点”。不被任何其他节点包含并且是所有其他节点的上级节点的节点称为“根节点”。一个节点可以同时是父节点和子节点，但是不能同时为根节点、父节点和叶节点。节点为根节点、父节点还是叶节点决定着节点的几种可视化属性和行为属性。</p>

<p>典型的树只有一个根节点，但 TreeView 控件允许您向树结构中添加多个根节点。如果希望在显示项列表的同时不显示单个的主根节点（例如显示产品类别列表），那么此功能将十分有用。</p>

<p>节点主要在两个属性中存储数据：Text 属性和 Value 属性。在 TreeView 控件中显示 Text 属性的值，而 Value 属性用于存储有关节点的所有其他数据，如用于处理回发事件的数据。节点还在 ValuePath 属性中存储从该节点到其根节点的路径。ValuePath 属性指示节点相对于根节点的位置。</p>

<ol>
<li>TreeNode</li>
</ol>


<p>TreeNode 对象由以下四个用户界面 (UI) 元素组成，可以自定义或隐藏这些元素：</p>

<p>展开节点指示图标，以表明节点是展开的、折叠的还是不可展开的。</p>

<p>与节点关联的可选复选框。</p>

<p>可选的节点图像。</p>

<p>节点文本。</p>

<p>可以通过设置 TreeView 类的 ExpandImageUrl、CollapseImageUrl 和 NoExpandImageUrl 属性，指定可展开、可折叠和不可展开的节点的自定义图像。通过将 TreeView 类的 ShowExpandCollapse 属性设置为 false，甚至可以完全隐藏展开节点的指示图标。</p>

<p>若要在节点旁显示复选框，请设置 TreeView 类的 ShowCheckBoxes 属性。如果 ShowCheckBoxes 属性设置为 TreeNodeType.Node 以外的一个值，将在指定的节点类型旁显示复选框。通过设置节点的 ShowCheckBox 属性，可以有选择地重写个别节点的复选框。如果显示复选框，可使用 Checked 属性确定复选框是否被选中。</p>

<p>通过设置 ImageUrl 属性可以在节点中显示图像。此图像显示在节点文本旁。</p>

<p>TreeView 控件中的节点文本可以处于两种模式之一：选择模式或导航模式。默认情况下，会有一个节点处于选定状态。若要使一个节点处于导航模式，请将该节点的 NavigateUrl 属性值设置为空字符串 (&ldquo;&rdquo;) 以外的值。若要使节点处于选择模式，请将节点的 NavigateUrl 属性设置为空字符串。</p>

<p>默认情况下，单击处于选择模式的节点会将页面回发到服务器并引发 SelectedNodeChanged 事件。也可以选择设置节点的 SelectAction 属性，指定引发其他事件。有关更多信息，请参见 SelectAction。若要确定哪个节点在被单击时处于选择模式，请使用 TreeView 控件的 SelectedNode 属性。</p>

<p>当节点处于导航模式时，禁用该节点的所有选择事件。单击处于导航模式的节点时，用户将被定向到指定的 URL。可以选择设置 Target 属性以指定用来显示链接内容的窗口或框架。</p>

<p>TreeNode 类包含一些用于存储节点状态的属性。可使用 Selected 属性确定节点是否被选定。若要确定节点是否已展开，请使用 Expanded 属性。DataBound 属性用于确定节点是否绑定到数据。当节点绑定到数据时，可以使用 DataItem 属性访问基础数据项。</p>

<p>此类提供了一些属性，有助于确定一个节点相对于树中其他节点的位置。使用 Depth 属性确定节点的深度。使用 ValuePath 属性可以获得从当前节点到其根节点的分隔节点列表。若要确定节点的父节点，请使用 Parent 属性。使用 ChildNodes 集合访问子节点。</p>

<p>有时，静态地预定义树结构并不可行，因为有时数据大小或自定义内容依用户输入而定。因此，TreeView 控件支持动态节点填充。在运行阶段，可以在展开节点时填充该节点。有关动态节点填充的更多信息，请参见 PopulateOnDemand 属性。</p>

<p>有关 TreeNode 的实例的初始属性值列表，请参见 TreeNode 构造函数。</p>

<ol>
<li>TreeNodeCollection</li>
</ol>


<p>TreeNodeCollection 类用于存储和管理 TreeView 控件中的 TreeNode 对象的集合。TreeView 控件在其两个属性中使用 TreeNodeCollection 类。在 Nodes 属性中存储其根节点，在 CheckedNodes 属性中存储其选定的节点。TreeNodeCollection 集合也用于 ChildNodes 属性来存储子节点（如果有的话）。</p>

<p>TreeNodeCollection 类支持多种访问集合中的项的方法：</p>

<p>使用 Item 索引器直接在特定的从零开始的索引处检索 TreeNode 对象。</p>

<p>使用 GetEnumerator 方法创建可用于循环访问集合的枚举数。</p>

<p>使用 foreach (C#) 或 For Each (Visual Basic) 循环访问集合。</p>

<p>使用 CopyTo 方法将集合的内容复制到一个 Array 对象中。</p>

<p>可以通过添加和移除 TreeNode 对象以编程方式管理 TreeNodeCollection。若要在集合中添加节点，请使用 Add 或 AddAt 方法。若要从集合中移除节点，请使用 Remove、RemoveAt 或 Clear 方法。</p>

<ol>
<li>Sample</li>
</ol>


<p>自动化测试情况下：</p>

<p>先实例化treeview，然后</p>

<pre><code>TreeNodeCollection treeNodeCollection = treeView.Nodes;

foreach(TreeNode treeNode in treeNodeCollection)

{

treeNode.select();

if(treeNode.text == "abcd")

{

Console.WriteLine("The node 'abcd' is found.");

具体处理；

break;

}

}
</code></pre>

<h3>Resource Reference</h3>

<ul>
<li><a href="http://www.360doc.com/content/11/1124/09/4509122_166943059.shtml">http://www.360doc.com/content/11/1124/09/4509122_166943059.shtml</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS-IE逗号问题]]></title>
    <link href="http://cnbin.github.io/blog/2016/02/23/extjs-iedou-hao-wen-ti/"/>
    <updated>2016-02-23T10:26:02+08:00</updated>
    <id>http://cnbin.github.io/blog/2016/02/23/extjs-iedou-hao-wen-ti</id>
    <content type="html"><![CDATA[<!--More-->


<p><img src="http://ww3.sinaimg.cn/mw690/78f9859ejw1f1861feyx0j20v208ftbg.jpg" alt="img" /></p>
]]></content>
  </entry>
  
</feed>
